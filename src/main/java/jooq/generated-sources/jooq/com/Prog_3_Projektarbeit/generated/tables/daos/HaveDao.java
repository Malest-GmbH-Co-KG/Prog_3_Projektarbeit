/*
 * This file is generated by jOOQ.
 */
package com.Prog_3_Projektarbeit.generated.tables.daos;


import com.Prog_3_Projektarbeit.generated.tables.Have;
import com.Prog_3_Projektarbeit.generated.tables.records.HaveRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HaveDao extends DAOImpl<HaveRecord, com.Prog_3_Projektarbeit.generated.tables.pojos.Have, Record2<Integer, String>> {

    /**
     * Create a new HaveDao without any configuration
     */
    public HaveDao() {
        super(Have.HAVE, com.Prog_3_Projektarbeit.generated.tables.pojos.Have.class);
    }

    /**
     * Create a new HaveDao with an attached configuration
     */
    public HaveDao(Configuration configuration) {
        super(Have.HAVE, com.Prog_3_Projektarbeit.generated.tables.pojos.Have.class, configuration);
    }

    @Override
    public Record2<Integer, String> getId(com.Prog_3_Projektarbeit.generated.tables.pojos.Have object) {
        return compositeKeyRecord(object.getBudgetId(), object.getUserName());
    }

    /**
     * Fetch records that have <code>budget_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Have> fetchRangeOfBudgetId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Have.HAVE.BUDGET_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>budget_id IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Have> fetchByBudgetId(Integer... values) {
        return fetch(Have.HAVE.BUDGET_ID, values);
    }

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Have> fetchRangeOfUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Have.HAVE.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Have> fetchByUserName(String... values) {
        return fetch(Have.HAVE.USER_NAME, values);
    }
}
