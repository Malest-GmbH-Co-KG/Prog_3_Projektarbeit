/*
 * This file is generated by jOOQ.
 */
package com.Prog_3_Projektarbeit.generated.tables;


import com.Prog_3_Projektarbeit.generated.DefaultSchema;
import com.Prog_3_Projektarbeit.generated.Keys;
import com.Prog_3_Projektarbeit.generated.tables.Budget.BudgetPath;
import com.Prog_3_Projektarbeit.generated.tables.User.UserPath;
import com.Prog_3_Projektarbeit.generated.tables.records.HaveRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Have extends TableImpl<HaveRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Have</code>
     */
    public static final Have HAVE = new Have();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HaveRecord> getRecordType() {
        return HaveRecord.class;
    }

    /**
     * The column <code>Have.budget_id</code>.
     */
    public final TableField<HaveRecord, Integer> BUDGET_ID = createField(DSL.name("budget_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Have.user_name</code>.
     */
    public final TableField<HaveRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Have(Name alias, Table<HaveRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Have(Name alias, Table<HaveRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Have</code> table reference
     */
    public Have(String alias) {
        this(DSL.name(alias), HAVE);
    }

    /**
     * Create an aliased <code>Have</code> table reference
     */
    public Have(Name alias) {
        this(alias, HAVE);
    }

    /**
     * Create a <code>Have</code> table reference
     */
    public Have() {
        this(DSL.name("Have"), null);
    }

    public <O extends Record> Have(Table<O> path, ForeignKey<O, HaveRecord> childPath, InverseForeignKey<O, HaveRecord> parentPath) {
        super(path, childPath, parentPath, HAVE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class HavePath extends Have implements Path<HaveRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> HavePath(Table<O> path, ForeignKey<O, HaveRecord> childPath, InverseForeignKey<O, HaveRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private HavePath(Name alias, Table<HaveRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public HavePath as(String alias) {
            return new HavePath(DSL.name(alias), this);
        }

        @Override
        public HavePath as(Name alias) {
            return new HavePath(alias, this);
        }

        @Override
        public HavePath as(Table<?> alias) {
            return new HavePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<HaveRecord> getPrimaryKey() {
        return Keys.HAVE__PK_HAVE;
    }

    @Override
    public List<ForeignKey<HaveRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HAVE__FK_HAVE_PK_BUDGET, Keys.HAVE__FK_HAVE_PK_USER);
    }

    private transient BudgetPath _budget;

    /**
     * Get the implicit join path to the <code>budget</code> table.
     */
    public BudgetPath budget() {
        if (_budget == null)
            _budget = new BudgetPath(this, Keys.HAVE__FK_HAVE_PK_BUDGET, null);

        return _budget;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>User</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.HAVE__FK_HAVE_PK_USER, null);

        return _user;
    }

    @Override
    public Have as(String alias) {
        return new Have(DSL.name(alias), this);
    }

    @Override
    public Have as(Name alias) {
        return new Have(alias, this);
    }

    @Override
    public Have as(Table<?> alias) {
        return new Have(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Have rename(String name) {
        return new Have(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Have rename(Name name) {
        return new Have(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Have rename(Table<?> name) {
        return new Have(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Have where(Condition condition) {
        return new Have(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Have where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Have where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Have where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Have where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Have where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Have where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Have where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Have whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Have whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
