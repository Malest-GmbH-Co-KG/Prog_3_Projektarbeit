/*
 * This file is generated by jOOQ.
 */
package com.Prog_3_Projektarbeit.generated.tables.daos;


import com.Prog_3_Projektarbeit.generated.tables.Accounts;
import com.Prog_3_Projektarbeit.generated.tables.records.AccountsRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccountsDao extends DAOImpl<AccountsRecord, com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts, Integer> {

    /**
     * Create a new AccountsDao without any configuration
     */
    public AccountsDao() {
        super(Accounts.ACCOUNTS, com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts.class);
    }

    /**
     * Create a new AccountsDao with an attached configuration
     */
    public AccountsDao(Configuration configuration) {
        super(Accounts.ACCOUNTS, com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts.class, configuration);
    }

    @Override
    public Integer getId(com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts> fetchById(Integer... values) {
        return fetch(Accounts.ACCOUNTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts fetchOneById(Integer value) {
        return fetchOne(Accounts.ACCOUNTS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts> fetchOptionalById(Integer value) {
        return fetchOptional(Accounts.ACCOUNTS.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts> fetchRangeOfUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts> fetchByUserId(Integer... values) {
        return fetch(Accounts.ACCOUNTS.USER_ID, values);
    }

    /**
     * Fetch records that have <code>account_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts> fetchRangeOfAccountName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.ACCOUNT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account_name IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts> fetchByAccountName(String... values) {
        return fetch(Accounts.ACCOUNTS.ACCOUNT_NAME, values);
    }

    /**
     * Fetch records that have <code>balance BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts> fetchRangeOfBalance(Float lowerInclusive, Float upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.BALANCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>balance IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Accounts> fetchByBalance(Float... values) {
        return fetch(Accounts.ACCOUNTS.BALANCE, values);
    }
}
