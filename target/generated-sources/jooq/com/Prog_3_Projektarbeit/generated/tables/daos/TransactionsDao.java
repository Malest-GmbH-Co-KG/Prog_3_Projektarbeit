/*
 * This file is generated by jOOQ.
 */
package com.Prog_3_Projektarbeit.generated.tables.daos;


import com.Prog_3_Projektarbeit.generated.tables.Transactions;
import com.Prog_3_Projektarbeit.generated.tables.records.TransactionsRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransactionsDao extends DAOImpl<TransactionsRecord, com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions, Object> {

    /**
     * Create a new TransactionsDao without any configuration
     */
    public TransactionsDao() {
        super(Transactions.TRANSACTIONS, com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions.class);
    }

    /**
     * Create a new TransactionsDao with an attached configuration
     */
    public TransactionsDao(Configuration configuration) {
        super(Transactions.TRANSACTIONS, com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions.class, configuration);
    }

    @Override
    public Object getId(com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions object) {
        return object.getTransactionId();
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfTransactionId(Object lowerInclusive, Object upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.TRANSACTION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByTransactionId(Object... values) {
        return fetch(Transactions.TRANSACTIONS.TRANSACTION_ID, values);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions fetchOneByTransactionId(Object value) {
        return fetchOne(Transactions.TRANSACTIONS.TRANSACTION_ID, value);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public Optional<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchOptionalByTransactionId(Object value) {
        return fetchOptional(Transactions.TRANSACTIONS.TRANSACTION_ID, value);
    }

    /**
     * Fetch records that have <code>budget_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfBudgetId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.BUDGET_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>budget_id IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByBudgetId(Integer... values) {
        return fetch(Transactions.TRANSACTIONS.BUDGET_ID, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfUserId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByUserId(String... values) {
        return fetch(Transactions.TRANSACTIONS.USER_ID, values);
    }

    /**
     * Fetch records that have <code>category BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfCategory(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.CATEGORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByCategory(String... values) {
        return fetch(Transactions.TRANSACTIONS.CATEGORY, values);
    }

    /**
     * Fetch records that have <code>ammount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfAmmount(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.AMMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ammount IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByAmmount(BigDecimal... values) {
        return fetch(Transactions.TRANSACTIONS.AMMOUNT, values);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByDate(LocalDate... values) {
        return fetch(Transactions.TRANSACTIONS.DATE, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByDescription(String... values) {
        return fetch(Transactions.TRANSACTIONS.DESCRIPTION, values);
    }
}
