/*
 * This file is generated by jOOQ.
 */
package com.Prog_3_Projektarbeit.generated.tables.daos;


import com.Prog_3_Projektarbeit.generated.tables.Transactions;
import com.Prog_3_Projektarbeit.generated.tables.records.TransactionsRecord;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransactionsDao extends DAOImpl<TransactionsRecord, com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions, Integer> {

    /**
     * Create a new TransactionsDao without any configuration
     */
    public TransactionsDao() {
        super(Transactions.TRANSACTIONS, com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions.class);
    }

    /**
     * Create a new TransactionsDao with an attached configuration
     */
    public TransactionsDao(Configuration configuration) {
        super(Transactions.TRANSACTIONS, com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions.class, configuration);
    }

    @Override
    public Integer getId(com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchById(Integer... values) {
        return fetch(Transactions.TRANSACTIONS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions fetchOneById(Integer value) {
        return fetchOne(Transactions.TRANSACTIONS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchOptionalById(Integer value) {
        return fetchOptional(Transactions.TRANSACTIONS.ID, value);
    }

    /**
     * Fetch records that have <code>account_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfAccountId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.ACCOUNT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account_id IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByAccountId(Integer... values) {
        return fetch(Transactions.TRANSACTIONS.ACCOUNT_ID, values);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByDate(LocalDate... values) {
        return fetch(Transactions.TRANSACTIONS.DATE, values);
    }

    /**
     * Fetch records that have <code>category BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfCategory(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.CATEGORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByCategory(String... values) {
        return fetch(Transactions.TRANSACTIONS.CATEGORY, values);
    }

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchRangeOfAmount(Float lowerInclusive, Float upperInclusive) {
        return fetchRange(Transactions.TRANSACTIONS.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<com.Prog_3_Projektarbeit.generated.tables.pojos.Transactions> fetchByAmount(Float... values) {
        return fetch(Transactions.TRANSACTIONS.AMOUNT, values);
    }
}
